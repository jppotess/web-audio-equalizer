{"version":3,"sources":["audioContext.js","view.js"],"names":[],"mappings":"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","file":"scripts.min.js","sourcesContent":["// audio Context\n\n// audio context w/ fallbacks\nvar audioContext = new (window.AudioContext || window.webkitAudioContext)();\nvar source;\nvar analyser = audioContext.createAnalyser();\nvar canvasEQ = document.querySelector(\"canvas#eq\");\nvar canvas = canvasEQ.getContext(\"2d\");\nvar play = document.querySelector(\"button.play\");\nvar stop = document.querySelector(\"button.stop\");\n\n// request animation fallbacks\nwindow.requestAnimationFrame = (function(){\nreturn window.requestAnimationFrame  ||\n  window.webkitRequestAnimationFrame ||\n  window.mozRequestAnimationFrame    ||\n  window.oRequestAnimationFrame      ||\n  window.msRequestAnimationFrame     ||\n  function(callback){\n  window.setTimeout(callback, 1000 / 60);\n};\n})();\n\n// Load the audio data\nfunction getData() {\n  source = audioContext.createBufferSource();\n\n  var request = new XMLHttpRequest();\n\n\n  request.addEventListener(\"progress\", updateProgress);\n  request.addEventListener(\"load\", transferComplete);\n  request.addEventListener(\"error\", transferFailed);\n  request.addEventListener(\"abour\", transferCanceled);\n\n  function updateProgress() {\n    console.log(\"update Progress\");\n  }\n\n  function transferComplete() {\n    console.log(\"transfer Complete\");\n  }\n\n  function transferFailed() {\n    console.log(\"transfer failed\");\n  }\n\n  function transferCanceled() {\n    console.log(\"transfer cancelled\");\n  }\n\n\n  request.open('GET', '../vendor/music/home.m4a', true)\n  request.responseType = 'arraybuffer';\n\n  request.onload = function() {\n\n    var audioData = request.response;\n\n    audioContext.decodeAudioData(audioData, function(buffer) {\n      source.buffer = buffer;\n\n      source.connect(analyser);\n\n      // get data\n      // var freqDomain = new Float32Array(analyser.frequencyBinCount);\n      // analyser.getFloatFrequencyData(freqDomain);\n\n      //  frequency domain\n      var delay = 5;\n      var delayCount = 0;\n\n\n      // objectname.canvas.width= this.WIDTH *** replace\n      // ovjectname.canvas.height = this.HEIGHT *** replace\n      var times = new Uint8Array(analyser.frequencyBinCount);\n\n\n        // wait until buffer loaded\n        if(delayCount == 0 || delayCount == delay) {\n          analyser.getByteFrequencyData(times);\n\n          for (var i = 0; i < times.length; i++) {\n            console.log(\"tl \" + times.length);\n            console.log(\"times \" + times[i]);\n            var value = times[i];\n            var percent = value / 256;\n            var height = 400 * percent;\n            var offset = 400 - height - 1;\n            var barWidth = 600/analyser.frequencyBinCount;\n            var hue = i/analyser.frequencyBinCount * 360;\n            canvas.fillStyle = 'hsl(' + hue + ', 100%, 50%)';\n            canvas.fillRect(i * barWidth, offset, barWidth, height);\n          }\n          delayCount = 1;\n        } else {\n          delayCount++;\n        }\n\n      // // time domain\n      // var timeDomain = new Uint8Array(analyser.frequencyBinCount);\n      // analyser.getByteTimeDomainData(freqDomain);\n      // for (var i = 0; i < analyser.frequencyBinCount; i++) {\n      //   var value = timeDomain[i];\n      //   var percent = value / 256;\n      //   var height = 400 * percent;\n      //   var offset = 400 - height - 1;\n      //   var barWidth = 600/analyser.frequencyBinCount;\n      //   canvas.fillStyle = 'black';\n      //   canvas.fillRect(i * barWidth, offset, 1, 1);\n      // }\n\n      function getFrequencyValue(frequency) {\n        var nyquist = context.sampleRate/2;\n        let index = Math.round(frequency/nyquist * freqDomain.length);\n      }\n\n\n\n\n      analyser.connect(audioContext.destination);\n      source.loop = true;\n    },function(e){\"Error with decoding audio data: \" + e.err});\n\n  }\n  request.send();\n}\n\n\n\n\n\n// Set Play and Pause(Stop) buttons\n\nplay.onclick = function() {\n  getData();\n  source.start(0);\n  play.setAttribute('disabled', 'disabled');\n}\n\nstop.onclick = function() {\n  source.stop(0);\n  play.removeAttribute('disabled');\n}\n\n","window.Vue = Vue;\n\nnew Vue ({\n  el: '#app',\n  data: {\n    message: 'world'\n  }\n})"],"sourceRoot":"/source/"}